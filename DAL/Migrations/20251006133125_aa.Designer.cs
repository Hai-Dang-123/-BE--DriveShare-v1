// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DriverShareAppContext))]
    [Migration("20251006133125_aa")]
    partial class aa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostVehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("PostVehicleId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.Clause", b =>
                {
                    b.Property<Guid>("ClauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClauseContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClauseVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClauseId");

                    b.ToTable("Clauses");
                });

            modelBuilder.Entity("DAL.Entities.Contract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("OwnerSigned")
                        .HasColumnType("bit");

                    b.Property<bool>("RenterSigned")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("ContractTemplateId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("DAL.Entities.ContractTemplate", b =>
                {
                    b.Property<Guid>("ContractTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractTemplateId");

                    b.ToTable("ContractTemplate");
                });

            modelBuilder.Entity("DAL.Entities.ContractTerm", b =>
                {
                    b.Property<Guid>("ContractTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostVehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TermType")
                        .HasColumnType("int");

                    b.HasKey("ContractTermId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ContractTemplateId");

                    b.HasIndex("PostVehicleId");

                    b.ToTable("ContractTerms", t =>
                        {
                            t.HasCheckConstraint("CK_ContractTerm_Parent", "(ContractTemplateId IS NOT NULL AND ContractId IS NULL) \r\n              OR (ContractTemplateId IS NULL AND ContractId IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.PostVehicle", b =>
                {
                    b.Property<Guid>("PostVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClauseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DailyPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostVehicleId");

                    b.HasIndex("ClauseId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("PostVehicles");
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ResponseComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("d4dab1c3-6d48-4b23-8369-2d1c9c828f22"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("a1dab1c3-6d48-4b23-8369-2d1c9c828f22"),
                            RoleName = "Driver"
                        },
                        new
                        {
                            RoleId = new Guid("b2dab1c3-6d48-4b23-8369-2d1c9c828f22"),
                            RoleName = "Owner"
                        },
                        new
                        {
                            RoleId = new Guid("e3dab1c3-6d48-4b23-8369-2d1c9c828f22"),
                            RoleName = "Staff"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Rule", b =>
                {
                    b.Property<Guid>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<int>("RuleCategory")
                        .HasColumnType("int");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RuleStatus")
                        .HasColumnType("int");

                    b.Property<int>("RuleUnit")
                        .HasColumnType("int");

                    b.Property<decimal>("RuleValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RuleId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DAL.Entities.Trip", b =>
                {
                    b.Property<Guid>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("ActualDistanceKm")
                        .HasColumnType("float");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ETA")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PlannedDistanceKm")
                        .HasColumnType("float");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TripId");

                    b.HasIndex("CreateById");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("DAL.Entities.TripDriver", b =>
                {
                    b.Property<Guid>("TripDriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalDriverLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalDriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalDriverPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TripDriverId");

                    b.HasIndex("DriverId");

                    b.HasIndex("TripId");

                    b.ToTable("TripDrivers");
                });

            modelBuilder.Entity("DAL.Entities.TripStepInPlan", b =>
                {
                    b.Property<Guid>("TripStepInPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<DateTime>("ETA")
                        .HasColumnType("datetime2");

                    b.Property<double>("EndLatitude")
                        .HasColumnType("float");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EndLongitude")
                        .HasColumnType("float");

                    b.Property<int>("RoadType")
                        .HasColumnType("int");

                    b.Property<double>("StartLatitude")
                        .HasColumnType("float");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StartLongitude")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("TripDriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TripStepInPlanId");

                    b.HasIndex("TripDriverId");

                    b.HasIndex("TripId");

                    b.ToTable("TripStepInPlans");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("12345678-90ab-cdef-1234-567890abcdef"),
                            Email = "admin@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d4dab1c3-6d48-4b23-8369-2d1c9c828f22"),
                            UserName = "Admin_Name",
                            UserStatus = 0
                        },
                        new
                        {
                            UserId = new Guid("22345678-90ab-cdef-1234-567890abcdef"),
                            Email = "driver@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("a1dab1c3-6d48-4b23-8369-2d1c9c828f22"),
                            UserName = "Driver_Name",
                            UserStatus = 0
                        },
                        new
                        {
                            UserId = new Guid("32345678-90ab-cdef-1234-567890abcdef"),
                            Email = "owner@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("b2dab1c3-6d48-4b23-8369-2d1c9c828f22"),
                            UserName = "Owner_Name",
                            UserStatus = 0
                        },
                        new
                        {
                            UserId = new Guid("42345678-90ab-cdef-1234-567890abcdef"),
                            Email = "staff@gmail.com",
                            PasswordHash = "$2a$11$rTz6DZiEeBqhVrzF25CgTOBPf41jpn2Tg/nnIqnX8KS6uIerB/1dm",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("e3dab1c3-6d48-4b23-8369-2d1c9c828f22"),
                            UserName = "Staff_Name",
                            UserStatus = 0
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserToken", b =>
                {
                    b.Property<Guid>("UserTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<int>("TokenType")
                        .HasColumnType("int");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("DAL.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VerificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DAL.Entities.VehicleImages", b =>
                {
                    b.Property<Guid>("VehicleImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleImageId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleImages");
                });

            modelBuilder.Entity("DAL.Entities.VehicleType", b =>
                {
                    b.Property<Guid>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VehicleTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            VehicleTypeId = new Guid("52345678-90ab-cdef-1234-567890abcdef"),
                            VehicleTypeName = "Container"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Verification", b =>
                {
                    b.Property<Guid>("VerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackDocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackVNPTFileHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocType")
                        .HasColumnType("int");

                    b.Property<string>("FrontDocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontVNPTFileHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawResultJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VerificationId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId")
                        .IsUnique()
                        .HasFilter("[VehicleId] IS NOT NULL");

                    b.ToTable("Verifications");
                });

            modelBuilder.Entity("DAL.Entities.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.HasOne("DAL.Entities.PostVehicle", "PostVehicle")
                        .WithMany()
                        .HasForeignKey("PostVehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostVehicle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Contract", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithOne("Contract")
                        .HasForeignKey("DAL.Entities.Contract", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ContractTemplate", "ContractTemplate")
                        .WithMany()
                        .HasForeignKey("ContractTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("ContractTemplate");
                });

            modelBuilder.Entity("DAL.Entities.ContractTerm", b =>
                {
                    b.HasOne("DAL.Entities.Contract", "Contract")
                        .WithMany("Terms")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Entities.ContractTemplate", "ContractTemplate")
                        .WithMany("ContractTerm")
                        .HasForeignKey("ContractTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.PostVehicle", "PostVehicle")
                        .WithMany("ContractTerms")
                        .HasForeignKey("PostVehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ContractTemplate");

                    b.Navigation("PostVehicle");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.PostVehicle", b =>
                {
                    b.HasOne("DAL.Entities.Clause", "Clause")
                        .WithMany("Posts")
                        .HasForeignKey("ClauseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("Posts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clause");

                    b.Navigation("Owner");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.HasOne("DAL.Entities.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.HasOne("DAL.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DAL.Entities.Trip", b =>
                {
                    b.HasOne("DAL.Entities.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("DAL.Entities.TripDriver", b =>
                {
                    b.HasOne("DAL.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Entities.Trip", "Trip")
                        .WithMany("Drivers")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Entities.TripStepInPlan", b =>
                {
                    b.HasOne("DAL.Entities.TripDriver", "Driver")
                        .WithMany()
                        .HasForeignKey("TripDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Trip", "Trip")
                        .WithMany("TripPlans")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.UserToken", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Vehicle", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("DAL.Entities.VehicleImages", b =>
                {
                    b.HasOne("DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleImages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DAL.Entities.Verification", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Verifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Entities.Vehicle", "Vehicle")
                        .WithOne("Verification")
                        .HasForeignKey("DAL.Entities.Verification", "VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DAL.Entities.Wallet", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Clause", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("DAL.Entities.Contract", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("DAL.Entities.ContractTemplate", b =>
                {
                    b.Navigation("ContractTerm");
                });

            modelBuilder.Entity("DAL.Entities.PostVehicle", b =>
                {
                    b.Navigation("ContractTerms");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Trip", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("TripPlans");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Tokens");

                    b.Navigation("Vehicles");

                    b.Navigation("Verifications");
                });

            modelBuilder.Entity("DAL.Entities.Vehicle", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("VehicleImages");

                    b.Navigation("Verification")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DAL.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
